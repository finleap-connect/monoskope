variables:
  RABBITMQ_DEFAULT_USER: guest
  RABBITMQ_DEFAULT_PASS: guest
  AMQP_URL: "amqp://guest:guest@127.0.0.1:5672"
  DB_URL: "postgres://root@127.0.0.1:26257/test?sslmode=disable"
  MINIO_ACCESS_KEY: "TESTACCESSKEY"
  MINIO_SECRET_KEY: "TESTSECRETKEY"
  MINIO_URL: "127.0.0.1:9000"

.gobase:
  image: registry.gitlab.figo.systems/platform/monoskope/monoskope/builder:latest
  except:
    - schedules
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
    - make go-mod
  cache:
    paths:
      - .go/pkg/mod/

.gobase-no-push:
  extends: .gobase
  cache:
    policy: pull

lint:golang:
  stage: test
  extends: .gobase
  script:
    - LINTER=golangci-lint make -j go-vet go-lint

test:golang:
  stage: test
  extends: .gobase
  services:
    - name: gitlab.figo.systems/platform/dependency_proxy/containers/rabbitmq:3.8.10-alpine
      alias: rabbitmq
    - name: gitlab.figo.systems/platform/dependency_proxy/containers/cockroachdb/cockroach:v20.2.2
      alias: cockroachdb
      command: ["start-single-node", "--insecure"]
    - name: gitlab.figo.systems/platform/dependency_proxy/containers/minio/minio:latest
      alias: minio
      command: ["server", "/data"]
  script:
    - GINKGO=ginkgo make go-test
    - make go-coverage
  artifacts:
    name: "Go Tests"
    when: always
    reports:
      junit: ["reports/*.xml"]

build:golang:gateway:
  stage: build
  extends: .gobase-no-push
  only:
    - web
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - VERSION=$VERSION make go-build-gateway
  artifacts:
    paths:
      - gateway
    expire_in: 1 day
  needs: []

build:golang:eventstore:
  stage: build
  extends: .gobase-no-push
  only:
    - web
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - VERSION=$VERSION make go-build-eventstore
  artifacts:
    paths:
      - eventstore
    expire_in: 1 day
  needs: []

build:golang:commandhandler:
  stage: build
  extends: .gobase-no-push
  only:
    - web
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - VERSION=$VERSION make go-build-commandhandler
  artifacts:
    paths:
      - commandhandler
    expire_in: 1 day
  needs: []

build:golang:queryhandler:
  stage: build
  extends: .gobase-no-push
  only:
    - web
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - VERSION=$VERSION make go-build-queryhandler
  artifacts:
    paths:
      - queryhandler
    expire_in: 1 day
  needs: []

deliver:gateway:
  stage: deliver
  extends: .docker-builder
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - build-image --file build/package/gateway.Dockerfile -i gateway --tag $VERSION
  dependencies:
    - lint:golang
    - test:golang
    - build:golang:gateway

deliver:eventstore:
  stage: deliver
  extends: .docker-builder
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - build-image --file build/package/eventstore.Dockerfile -i eventstore --tag $VERSION
  dependencies:
    - lint:golang
    - test:golang
    - build:golang:eventstore

deliver:commandhandler:
  stage: deliver
  extends: .docker-builder
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - build-image --file build/package/commandhandler.Dockerfile -i commandhandler --tag $VERSION
  dependencies:
    - lint:golang
    - test:golang
    - build:golang:commandhandler

deliver:queryhandler:
  stage: deliver
  extends: .docker-builder
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - build-image --file build/package/queryhandler.Dockerfile -i queryhandler --tag $VERSION
  dependencies:
    - lint:golang
    - test:golang
    - build:golang:queryhandler

scan:image:
  stage: scan
  image: gitlab.figo.systems/platform/dependency_proxy/containers/curlimages/curl:7.76.1
  # only:
  #   - web
  script:
    - export VERSION=$(sh ./build/ci/configure_versions.sh)
    - sh ./build/ci/scan_images.sh
