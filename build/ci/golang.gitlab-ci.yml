# Copyright 2021 Monoskope Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

variables:
  GO_MODULE: gitlab.figo.systems/platform/monoskope/monoskope
  RABBITMQ_DEFAULT_USER: guest
  RABBITMQ_DEFAULT_PASS: guest
  AMQP_URL: "amqp://guest:guest@127.0.0.1:5672"
  DB_URL: "postgres://root@127.0.0.1:26257/test?sslmode=disable"
  MINIO_ACCESS_KEY: "TESTACCESSKEY"
  MINIO_SECRET_KEY: "TESTSECRETKEY"
  MINIO_URL: "127.0.0.1:9000"

.gobase:
  image: registry.gitlab.figo.systems/platform/monoskope/m8-builder:latest
  except:
    - schedules
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/
    key: "$CI_COMMIT_REF_SLUG"

cache:golang:
  stage: prepare
  extends: .gobase
  script:
    - make go-mod
  only:
    changes:
        - "go.sum"

.gobase-no-push:
  extends: .gobase
  cache:
    policy: pull

.docker-builder:
  extends: .gobase-no-push
  image: registry.gitlab.figo.systems/finleap-cloud-tools/docker-builder:1.6.8
  only:
    - web
    - tags
    
lint:golang:
  stage: test
  extends: .gobase-no-push
  script:
    - LINTER=golangci-lint make -j go-vet go-lint

test:golang:
  stage: test
  extends: .gobase-no-push
  services:
    - name: gitlab.figo.systems/platform/dependency_proxy/containers/rabbitmq:3.8.10-alpine
      alias: rabbitmq
    - name: gitlab.figo.systems/platform/dependency_proxy/containers/cockroachdb/cockroach:v20.2.2
      alias: cockroachdb
      command: ["start-single-node", "--insecure"]
    - name: gitlab.figo.systems/platform/dependency_proxy/containers/minio/minio:latest
      alias: minio
      command: ["server", "/data"]
  script:
    - GINKGO=ginkgo make go-test-ci
    - make go-coverage
  artifacts:
    name: "Go Tests"
    when: always
    reports:
      junit: ["reports/*.xml"]
  
deliver:gateway:
  stage: deliver
  extends: .docker-builder
  script:
    - APP=gateway
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - COMMIT=$(git rev-parse --short HEAD)
    - build-image --file build/package/go.Dockerfile -i $APP --tag $VERSION --build-arg VERSION=$VERSION --build-arg GO_MODULE=$GO_MODULE --build-arg SRC="cmd/$APP/*.go" --build-arg COMMIT=$COMMIT --build-arg NAME=$APP
  dependencies:
    - lint:golang
    - test:golang

deliver:eventstore:
  stage: deliver
  extends: .docker-builder
  script:
    - APP=eventstore
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - COMMIT=$(git rev-parse --short HEAD)
    - build-image --file build/package/go.Dockerfile -i $APP --tag $VERSION --build-arg VERSION=$VERSION --build-arg GO_MODULE=$GO_MODULE --build-arg SRC="cmd/$APP/*.go" --build-arg COMMIT=$COMMIT --build-arg NAME=$APP
  dependencies:
    - lint:golang
    - test:golang

deliver:commandhandler:
  stage: deliver
  extends: .docker-builder
  script:
    - APP=commandhandler
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - COMMIT=$(git rev-parse --short HEAD)
    - build-image --file build/package/go.Dockerfile -i $APP --tag $VERSION --build-arg VERSION=$VERSION --build-arg GO_MODULE=$GO_MODULE --build-arg SRC="cmd/$APP/*.go" --build-arg COMMIT=$COMMIT --build-arg NAME=$APP
  dependencies:
    - lint:golang
    - test:golang

deliver:queryhandler:
  stage: deliver
  extends: .docker-builder
  script:
    - APP=queryhandler
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - COMMIT=$(git rev-parse --short HEAD)
    - build-image --file build/package/go.Dockerfile -i $APP --tag $VERSION --build-arg VERSION=$VERSION --build-arg GO_MODULE=$GO_MODULE --build-arg SRC="cmd/$APP/*.go" --build-arg COMMIT=$COMMIT --build-arg NAME=$APP
  dependencies:
    - lint:golang
    - test:golang

deliver:clusterbootstrapreactor:
  stage: deliver
  extends: .docker-builder
  script:
    - APP=clusterbootstrapreactor
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - COMMIT=$(git rev-parse --short HEAD)
    - build-image --file build/package/go.Dockerfile -i $APP --tag $VERSION --build-arg VERSION=$VERSION --build-arg GO_MODULE=$GO_MODULE --build-arg SRC="cmd/$APP/*.go" --build-arg COMMIT=$COMMIT --build-arg NAME=$APP
  dependencies:
    - lint:golang
    - test:golang

scan:images:
  stage: scan
  image: gitlab.figo.systems/platform/dependency_proxy/containers/curlimages/curl:7.76.1
  only:
    - web
    - tags
  script:
    - export VERSION=$(sh ./build/ci/configure_versions.sh)
    - sh ./build/ci/scan_images.sh
