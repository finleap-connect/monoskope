variables:
  RABBITMQ_DEFAULT_USER: guest
  RABBITMQ_DEFAULT_PASS: guest
  AMQP_URL: "amqp://guest:guest@127.0.0.1:5672"

.gobase:
  image: registry.gitlab.figo.systems/platform/monoskope/monoskope/builder:latest
  except:
    - schedules
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
    - make go-mod
  cache:
    paths:
      - .go/pkg/mod/

.gobase-no-push:
  extends: .gobase
  cache:
    policy: pull

.gobase-docker:
  extends: .gobase
  services:
    - gitlab.figo.systems/platform/dependency_proxy/containers/docker:18-dind

lint:golang:
  stage: test
  extends: .gobase-docker
  script:
    - make go-golangci-lint-get
    - make -j go-vet go-lint

test:golang:
  stage: test
  extends: .gobase-docker
  services:
    - gitlab.figo.systems/platform/dependency_proxy/containers/docker:18-dind
    - gitlab.figo.systems/platform/dependency_proxy/containers/rabbitmq:3.8.10-alpine
  script:
    - make go-ginkgo-get
    - make go-test
    - make go-coverage
  artifacts:
    name: "Go Tests"
    when: always
    reports:
      junit: ["reports/*.xml"]

build:golang:gateway:
  stage: build
  extends: .gobase-no-push
  only:
    - tags
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - VERSION=$VERSION make go-build-gateway
  artifacts:
    paths:
      - gateway
    expire_in: 1 day
  needs: []

build:golang:eventstore:
  stage: build
  extends: .gobase-no-push
  only:
    - tags
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - VERSION=$VERSION make go-build-eventstore
  artifacts:
    paths:
      - eventstore
    expire_in: 1 day
  needs: []

build:golang:commandhandler:
  stage: build
  extends: .gobase-no-push
  only:
    - tags
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - VERSION=$VERSION make go-build-commandhandler
  artifacts:
    paths:
      - commandhandler
    expire_in: 1 day
  needs: []

deliver:gateway:
  stage: deliver
  image: registry.gitlab.figo.systems/platform/docker-builder:1.4.2
  services:
    - gitlab.figo.systems/platform/dependency_proxy/containers/docker:18-dind
  only:
    - tags
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - build-image --file build/package/gateway.Dockerfile -i gateway --tag $VERSION
  dependencies:
    - lint:golang
    - test:golang
    - build:golang:gateway

deliver:eventstore:
  stage: deliver
  image: registry.gitlab.figo.systems/platform/docker-builder:1.4.2
  services:
    - gitlab.figo.systems/platform/dependency_proxy/containers/docker:18-dind
  only:
    - tags
  script:
    - VERSION=$(sh ./build/ci/configure_versions.sh)
    - build-image --file build/package/eventstore.Dockerfile -i eventstore --tag $VERSION
  dependencies:
    - lint:golang
    - test:golang
    - build:golang:eventstore
