apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cluster-bootstrap-reactor.fullname" . }}
  labels:
    {{- include "cluster-bootstrap-reactor.labels" . | nindent 4 }}
    {{- with (.Values.labels | default .Values.global.labels) }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  progressDeadlineSeconds: 120
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "cluster-bootstrap-reactor.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cluster-bootstrap-reactor.selectorLabels" . | nindent 8 }}
        {{- with (.Values.labels | default .Values.global.labels) }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with (.Values.imagePullSecrets | default .Values.global.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ (include "cluster-bootstrap-reactor.name" .) }}
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ .Release.Name }}
      serviceAccountName: {{ include "cluster-bootstrap-reactor.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - secretRef:
                name: {{ .Values.messageBus.configSecret | default (printf "%s-%s" (include "cluster-bootstrap-reactor.fullname" .) "bus") }}
          args:
            - /app
            - server
            - {{ (printf "--event-store-api-addr=%s-%s:%v" (.Values.eventStore.prefix | default .Release.Name ) .Values.eventStore.host .Values.eventStore.port ) }}
            - --msgbus-routing-key-prefix=$(ROUTING_KEY_PREFIX)
            - --jwt-privatekey=/etc/reactor/signing.key
            - --certificate-issuer={{ .Values.certificates.issuerName }}
            - --certificate-issuer-kind={{ .Values.certificates.issuerKind }}
            - --certificate-duration={{ .Values.certificates.duration }}
            - --issuer-url={{ required "A valid .Values.issuerURL entry is required!" .Values.issuerURL}}
          env:
            - name: K8S_NAMESPACE
              value: {{ .Release.Namespace }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: key-secret
              mountPath: /etc/reactor
              readOnly: true
          {{- if .Values.messageBus.tlsSecret }}
            - name: buscerts
              mountPath: /etc/eventstore/certs/buscerts
              readOnly: true
          {{- end }}
          # define a readiness probe that checks every 5 seconds
          readinessProbe:
            httpGet:
              path: /ready
              port: 8086
            periodSeconds: 5
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: key-secret
          secret:
            secretName: {{ required "A valid .Values.keySecret.name entry is required!" .Values.keySecret.name }}
            items:
            - key: {{ .Values.keySecret.field }}
              path: signing.key
      {{- if .Values.messageBus.tlsSecret }}
        - name: buscerts
          secret:
            secretName: {{ .Values.messageBus.tlsSecret }}
      {{- end }}
