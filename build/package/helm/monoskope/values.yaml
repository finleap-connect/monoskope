# Default values for monoskope.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

name: &name monoskope
nameOverride: ""
fullnameOverride: ""

global:
  imagePullSecrets: []
  labels:
    app.kubernetes.io/part-of: *name

monitoring:
  tenant: &tenant finleap-cloud

ingress:
  enabled: false
  host: monoskope.io

dex: # OIDC Provider
  enabled: false
  replicas: 1
  image: ghcr.io/dexidp/dex
  imageTag: "v2.27.0"
  imagePullPolicy: "Always"
  config:
    # -- Name of the secret containing the dex config
    existingSecret: monoskope-dex-config
    # -- Domain of the issuer (dex)
    issuer: &issuer https://monoskope.io/dex
    storage:
      type: postgres
      config:
        port: 26257
        database: dex_db
        user: dex
        # -- Secret containing the certificates to communicate with the storage backend
        secret: monoskope-crdb-client-dex
        ssl:
          mode: verify-ca
          caFile: /etc/dex/certs/ca.crt
          certFile: /etc/dex/certs/client.crt
          keyFile: /etc/dex/certs/client.key
    logger:
      level: debug
    web:
      address: 0.0.0.0
    oauth2:
      alwaysShowLoginScreen: false
      skipApprovalScreen: true
    enablePasswordDB: false
    connectors: []
    staticClients:
      - id: gateway
        secret: "{{ .gatewayAppSecret }}"
        name: "Monoskope Gateway"
        redirectURIs:
          - "http://localhost:8000" # callback from dex to monoctl
          - "http://localhost:18000"
  https: false
  ports:
    web:
      containerPort: 5556
  grpc: false
  resources:
    limits:
      cpu: 500m
      memory: 100Mi
    requests:
      cpu: 100m
      memory: 50Mi
  telemetry: true
  certs:
    web:
      create: false
    grpc:
      create: false
  rbac:
    # Specifies whether RBAC resources should be created
    create: false
  crd:
    # Specifies whether dex's CRDs are already present (if not cluster role and cluster role binding will be created
    # to enable dex to create them). Depends on rbac.create
    present: true
  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: false
    # The name of the ServiceAccount to use.
  # frontend:
  #   logoURL: https://example.com/yourlogo.png
  labels:
    app.kubernetes.io/part-of: *name

gateway:
  nameOverride: "gateway"
  enabled: true
  replicaCount: 1
  auth:
    allowRootToken: false
    issuerURL: *issuer

eventstore:
  nameOverride: "eventstore"
  enabled: true
  replicaCount: 1
  config:
    existingSecret: monoskope-eventstore-config

cockroachdb:
  enabled: true
  image:
    repository: gitlab.figo.systems/platform/dependency_proxy/containers/cockroachdb/cockroach
    tag: v20.2.2
    imagePullPolicy: Always
  statefulset:
    replicas: 3 # Do not scale down existing cluster here, see https://www.cockroachlabs.com/docs/v20.2/remove-nodes.html
    maxUnavailable: 1
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1
        memory: 2Gi
    annotations:
      linkerd.io/inject: disabled
  init:
    annotations:
      linkerd.io/inject: disabled
  storage:
    persistentVolume:
      size: "20Gi" # ATTENTION: Increase for PROD according to your use-case
  conf:
    # Total size in bytes for caches, shared evenly if there are multiple
    # storage devices. Size suffixes are supported (e.g. `1GB` and `1GiB`).
    # A percentage of physical memory can also be specified (e.g. `.25`).
    cache: 25%
    # Maximum memory capacity available to store temporary data for SQL clients,
    # including prepared queries and intermediate data rows during query
    # execution. Accepts numbers interpreted as bytes, size suffixes
    # (e.g. `1GB` and `1GiB`) or a percentage of physical memory (e.g. `.25`).
    maxSQLMemory: 25%
  tls:
    enabled: true
    certs:
      provided: true
      tlsSecret: true
      # Secret name for the client root cert.
      clientRootSecret: monoskope-crdb-root
      # Secret name for node cert.
      nodeSecret: monoskope-crdb-node
  labels:
    app.kubernetes.io/part-of: *name
  # CockroachDB's Prometheus operator ServiceMonitor support
  serviceMonitor:
    enabled: true
    labels: {}
    annotations: {}
    interval: 30s
    # scrapeTimeout: 10s

rabbitmq:
  enabled: true
  replicaCount: 3
  persistence:
    enabled: false
  image:
    repository: gitlab.figo.systems/platform/dependency_proxy/containers/bitnami/rabbitmq
    tag: 3.8.9
    pullPolicy: Always
  loadDefinition:
    enabled: true
    existingSecret: monoskope-rabbitmq-load-definition
  extraConfiguration: |-
    load_definitions = /app/rabbitmq-definitions.json
  service:
    tlsPort: 5671
    labels:
      app.kubernetes.io/part-of: *name
  auth:
    username: admin # admin user with read/write access
    password: ""  # this will be overwritten by a real password but needs to be set initially
    existingErlangSecret: monoskope-rabbitmq-erlang-cookie
    tls:
      enabled: true
      failIfNoPeerCert: true
      sslOptionsVerify: verify_peer
      existingSecret: monoskope-rabbitmq-leaf
  statefulsetLabels:
    app.kubernetes.io/part-of: *name
  podAnnotations:
    linkerd.io/inject: disabled
  podLabels:
    app.kubernetes.io/part-of: *name
  metrics:
    enabled: true
    grafanaDashboard:
      enabled: true
      extraLabels:
        tenant: *tenant
        app.kubernetes.io/part-of: *name
    serviceMonitor:
      enabled: true
      additionalLabels:
        tenant: *tenant
        app.kubernetes.io/part-of: *name
