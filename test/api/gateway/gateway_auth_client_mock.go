// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finleap-connect/monoskope/pkg/api/gateway (interfaces: GatewayAuthClient)

// Package gateway is a generated GoMock package.
package gateway

import (
	context "context"
	reflect "reflect"

	gateway "github.com/finleap-connect/monoskope/pkg/api/gateway"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGatewayAuthClient is a mock of GatewayAuthClient interface.
type MockGatewayAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayAuthClientMockRecorder
}

// MockGatewayAuthClientMockRecorder is the mock recorder for MockGatewayAuthClient.
type MockGatewayAuthClientMockRecorder struct {
	mock *MockGatewayAuthClient
}

// NewMockGatewayAuthClient creates a new mock instance.
func NewMockGatewayAuthClient(ctrl *gomock.Controller) *MockGatewayAuthClient {
	mock := &MockGatewayAuthClient{ctrl: ctrl}
	mock.recorder = &MockGatewayAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayAuthClient) EXPECT() *MockGatewayAuthClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockGatewayAuthClient) Check(arg0 context.Context, arg1 *gateway.CheckRequest, arg2 ...grpc.CallOption) (*gateway.CheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*gateway.CheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockGatewayAuthClientMockRecorder) Check(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockGatewayAuthClient)(nil).Check), varargs...)
}
