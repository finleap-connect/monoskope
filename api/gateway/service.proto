// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// This file follows google's gRPC naming conventions:
// https://cloud.google.com/apis/design/naming_convention

import "api/gateway/messages.proto";

option go_package = "github.com/finleap-connect/monoskope/pkg/api/gateway";

package gateway;

// API of the Monoskope Gateway.
service Gateway {
  // PrepareAuthentication returns the URL to call to authenticate against the
  // upstream IDP
  rpc RequestUpstreamAuthentication(UpstreamAuthenticationRequest)
      returns (UpstreamAuthenticationResponse);
  // RequestAuthentication is called to exchange the authorization code with the
  // upstream IDP and to authenticate with the m8 control plane
  rpc RequestAuthentication(AuthenticationRequest)
      returns (AuthenticationResponse);
}

// A service for performing authorization check on incoming
// requests to a networked service part of m8.
service GatewayAuth {
  // Performs authorization check based on the attributes associated with the
  // incoming request, and returns status `OK` or not `OK`.
  rpc Check(CheckRequest) returns (CheckResponse);
}

// ClusterAuth is the API to request token for cluster authentication from
service ClusterAuth {
  rpc GetAuthToken(ClusterAuthTokenRequest) returns (ClusterAuthTokenResponse);
}

// APIToken is the API to request API tokens with
service APIToken {
  rpc RequestAPIToken(APITokenRequest) returns (APITokenResponse);
}