// Copyright 2021 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// This file follows google's gRPC naming conventions:
// https://cloud.google.com/apis/design/naming_convention

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/finleap-connect/monoskope/pkg/api/gateway";

package gateway;

// API of the Monoskope Gateway.
service Gateway {
  rpc GetAuthInformation(AuthState) returns (AuthInformation);
  rpc ExchangeAuthCode(AuthCode) returns (AuthResponse);
}

// ClusterAuth is the API to request token for cluster authentication from
service ClusterAuth {
  rpc GetAuthToken(ClusterAuthTokenRequest) returns (ClusterAuthTokenResponse);
}

// ClusterAuth is the API to request token for cluster authentication from
service APIToken {
  rpc RequestAPIToken(APITokenRequest) returns (ClusterAuthTokenResponse);
}

message AuthState { string callback_url = 1; }

message AuthInformation {
  string auth_code_url = 1;
  string state = 2;
}

message AuthCode {
  string code = 1;
  string state = 2;
  string callback_url = 3;
}

message AuthResponse {
  string access_token = 1;
  google.protobuf.Timestamp expiry = 2;
  string username = 3;
}

// ClusterAuthTokenRequest is send in order to retrieve an auth token valid to
// authenticate against a certain cluster with a specific role
message ClusterAuthTokenRequest {
  // Unique identifier of the cluster (UUID 128-bit number)
  string cluster_id = 1 [(validate.rules).string.uuid = true];
  // Kubernetes role name
  string role = 2 [(validate.rules).string = {pattern: "^[a-z]+$", max_bytes: 60}];
}

// ClusterAuthTokenResponse contains an auth token valid to
// authenticate against a certain cluster with a specific role
message ClusterAuthTokenResponse {
  // JWT to authenticate a K8s cluster
  string access_token = 1;
  // Timestamp when the token expires
  google.protobuf.Timestamp expiry = 2;
}

// APITokenRequest is send in order to retrieve an API token valid to
// authenticate against Monoskope and authorize specific scopes.
message APITokenRequest {
  // Scope the resulting token is issued for
  AuthorizationScope authorization_scope = 1;
  // Subject the token authenticates
  string subject = 2;
}

enum AuthorizationScope {
  NONE = 0; // Dummy to prevent accidents
  API = 1; // Read-write for the complete API
  WRITE_SCIM = 2; // Read-write for endpoints under /scim
  WRITE_K8SOPERATOR = 3; // Read-write for K8sOperator endpoints
}