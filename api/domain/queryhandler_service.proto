// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// This file follows google's gRPC naming conventions:
// https://cloud.google.com/apis/design/naming_convention

import "api/domain/projections/user.proto";
import "api/domain/projections/tenant.proto";
import "api/domain/projections/cluster.proto";
import "api/domain/projections/tenant_cluster_binding.proto";
import "api/domain/audit/user.proto";
import "api/domain/audit/event.proto";
import "validate/validate.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/finleap-connect/monoskope/pkg/api/domain";

package domain;

// User is a service to query Users.
service User {
  // GetAll returns all users.
  rpc GetAll(GetAllRequest) returns (stream projections.User);
  // GetById returns the user found by the given id.
  rpc GetById(google.protobuf.StringValue) returns (projections.User);
  // GetByEmail returns the user found by the given email address.
  rpc GetByEmail(google.protobuf.StringValue) returns (projections.User);
  // GetRoleBindingsById returns all role bindings related to the given user id.
  rpc GetRoleBindingsById(google.protobuf.StringValue)
      returns (stream projections.UserRoleBinding);
  // GetCount returns the count of users
  rpc GetCount(GetCountRequest) returns (GetCountResult);
}

// Tenant is a service to query Tenants.
service Tenant {
  // GetAll returns all tenants.
  rpc GetAll(GetAllRequest) returns (stream projections.Tenant);
  // GetById returns the tenant found by the given id.
  rpc GetById(google.protobuf.StringValue) returns (projections.Tenant);
  // GetByName returns the tenant found by the given name
  rpc GetByName(google.protobuf.StringValue) returns (projections.Tenant);
  // GetUsers returns users belonging to the given tenant id.
  rpc GetUsers(google.protobuf.StringValue)
      returns (stream projections.TenantUser);
}

// Cluster is a service to query information about known clusters.
service Cluster {
  // GetAll returns all known clusters
  rpc GetAll(GetAllRequest) returns (stream projections.Cluster);
  // GetById returns a cluster by its UUID
  rpc GetById(google.protobuf.StringValue) returns (projections.Cluster);
  // GetByName returns a cluster by its name
  rpc GetByName(google.protobuf.StringValue) returns (projections.Cluster);
}

// ClusterAccess is a service to query access information about clusters.
service ClusterAccess {
  // GetClusterAccessByTenantId returns clusters which the given tenant has
  // access to by it's UUID
  rpc GetClusterAccessByTenantId(google.protobuf.StringValue)
      returns (stream projections.ClusterAccess);
  // GetClusterAccessByUserId returns clusters which the given user has access
  // to by it's UUID
  rpc GetClusterAccessByUserId(google.protobuf.StringValue)
      returns (stream projections.ClusterAccess);
  // GetTenantClusterMappingsByTenantId returns bindings which belong to the
  // given tenant by it's UUID
  rpc GetTenantClusterMappingsByTenantId(google.protobuf.StringValue)
      returns (stream projections.TenantClusterBinding);
  // GetTenantClusterMappingsByClusterId returns bindings which belong to the
  // given cluster by it's UUID
  rpc GetTenantClusterMappingsByClusterId(google.protobuf.StringValue)
      returns (stream projections.TenantClusterBinding);
  // GetTenantClusterMappingsByClusterId returns the binding which belongs to
  // the given tenant and cluster by their UUIDs
  rpc GetTenantClusterMappingByTenantAndClusterId(GetClusterMappingRequest)
      returns (projections.TenantClusterBinding);
}

service AuditLog {
  // GetByDateRange returns human-readable events within the specified data
  // range
  rpc GetByDateRange(GetAuditLogByDateRangeRequest)
      returns (stream audit.HumanReadableEvent);
  // GetByUser returns human-readable events caused by others actions on the
  // given user
  rpc GetByUser(GetByUserRequest) returns (stream audit.HumanReadableEvent);
  // GetUserActions returns human-readable events caused by the given user
  // actions
  rpc GetUserActions(GetUserActionsRequest)
      returns (stream audit.HumanReadableEvent);
  // GetUsersOverview returns users overview at the specified timestamp,
  // tenants/clusters they belong to, and their roles
  rpc GetUsersOverview(GetUsersOverviewRequest)
      returns (stream audit.UserOverview);
}

// GetAllRequest is the generic request to query all instances of a certain
// projection
message GetAllRequest { bool include_deleted = 1; }

message GetClusterMappingRequest {
  string tenant_id = 1;
  string cluster_id = 2;
}

message GetCountRequest { bool include_deleted = 1; }

message GetCountResult { int64 count = 1; }

message GetAuditLogByDateRangeRequest {
  google.protobuf.Timestamp min_timestamp = 1;
  google.protobuf.Timestamp max_timestamp = 2;
}

message GetByUserRequest {
  google.protobuf.StringValue email = 1
      [ (validate.rules).string.email = true ];
  GetAuditLogByDateRangeRequest date_range = 2;
}

message GetUserActionsRequest {
  google.protobuf.StringValue email = 1
      [ (validate.rules).string.email = true ];
  GetAuditLogByDateRangeRequest date_range = 2;
}

message GetUsersOverviewRequest { google.protobuf.Timestamp timestamp = 1; }
