syntax = "proto3";

// This file follows google's gRPC naming conventions:
// https://cloud.google.com/apis/design/naming_convention

import "google/protobuf/empty.proto";
import "api/domain/projections/messages.proto";
import "api/eventsourcing/messages.proto";
import "google/protobuf/wrappers.proto";

option go_package = "gitlab.figo.systems/platform/monoskope/monoskope/pkg/api/domain";

package domain;

// UserService is a service to query users.
service UserService {
  // GetAll returns all users.
  rpc GetAll(GetAllRequest) returns (stream projections.User);
  // GetById returns the user found by the given id.
  rpc GetById(google.protobuf.StringValue) returns (projections.User);
  // GetByEmail returns the user found by the given email address.
  rpc GetByEmail(google.protobuf.StringValue) returns (projections.User);
  // GetRoleBindingsById returns all role bindings related to the given user id.
  rpc GetRoleBindingsById(google.protobuf.StringValue)
      returns (stream projections.UserRoleBinding);
  // GetAuditTrailById returns a stream of all events related to the given id
  rpc GetAuditTrailById(google.protobuf.StringValue)
      returns (stream projections.AuditEvent);
}

// TenantService is a service to query tenants.
service TenantService {
  // GetAll returns all tenants.
  rpc GetAll(GetAllRequest) returns (stream projections.Tenant);
  // GetById returns the tenant found by the given id.
  rpc GetById(google.protobuf.StringValue) returns (projections.Tenant);
  // GetByName returns the tenant found by the given name
  rpc GetByName(google.protobuf.StringValue) returns (projections.Tenant);
  // GetAuditTrailById returns a stream of all events related to the given id
  rpc GetAuditTrailById(google.protobuf.StringValue)
      returns (stream projections.AuditEvent);
}

// K8sOperator service is used by remote m8 Operators to query the Control Plane
service K8sOperator {
  rpc GetOperatorInformation(google.protobuf.Empty)
      returns (OperatorInformationResponse);
  rpc Retrieve(google.protobuf.Empty) returns (stream eventsourcing.Event);
}

message GetAllRequest { bool excludeDeleted = 1; }

// OperatorInformationResponse is the information the Control Plane has about
// the requesting operator
message OperatorInformationResponse {
  // Unique identifier of the cluster (UUID 128-bit number)
  string id = 1;
  // Unique name of the cluster
  string name = 2;
  // Address of the clusters KubeAPIServer
  string apiServerAddress = 3;
  // CA certificate of the cluster
  bytes clusterCACert = 4;
}
