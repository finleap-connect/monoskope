syntax = "proto3";

// This file follows google's gRPC naming conventions:
// https://cloud.google.com/apis/design/naming_convention

import "google/protobuf/empty.proto";
import "api/domain/projections/user.proto";
import "api/domain/projections/tenant.proto";
import "api/domain/projections/cluster.proto";
import "api/eventsourcing/messages.proto";
import "google/protobuf/wrappers.proto";

option go_package = "gitlab.figo.systems/platform/monoskope/monoskope/pkg/api/domain";

package domain;

// User is a service to query Users.
service User {
  // GetAll returns all users.
  rpc GetAll(GetAllRequest) returns (stream projections.User);
  // GetById returns the user found by the given id.
  rpc GetById(google.protobuf.StringValue) returns (projections.User);
  // GetByEmail returns the user found by the given email address.
  rpc GetByEmail(google.protobuf.StringValue) returns (projections.User);
  // GetRoleBindingsById returns all role bindings related to the given user id.
  rpc GetRoleBindingsById(google.protobuf.StringValue)
      returns (stream projections.UserRoleBinding);
}

// Tenant is a service to query Tenants.
service Tenant {
  // GetAll returns all tenants.
  rpc GetAll(GetAllRequest) returns (stream projections.Tenant);
  // GetById returns the tenant found by the given id.
  rpc GetById(google.protobuf.StringValue) returns (projections.Tenant);
  // GetByName returns the tenant found by the given name
  rpc GetByName(google.protobuf.StringValue) returns (projections.Tenant);
}

// ClusterRegistration is a service to query ClusterRegistrations.
service ClusterRegistration {
  // GetAll returns all registration requests.
  rpc GetAll(GetAllRequest) returns (stream projections.ClusterRegistration);
  // GetPending returns all pending registration requests.
  rpc GetPending(google.protobuf.Empty)
      returns (stream projections.ClusterRegistration);
}

// K8sOperator is a service used by remote K8s Operators to query the Control
// Plane
service K8sOperator {
  rpc GetCluster(google.protobuf.Empty) returns (projections.Cluster);
  rpc Retrieve(google.protobuf.Empty) returns (stream eventsourcing.Event);
}

message GetAllRequest { bool includeDeleted = 1; }
