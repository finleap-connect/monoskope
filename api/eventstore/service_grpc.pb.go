// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package eventstore

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EventStoreClient is the client API for EventStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStoreClient interface {
	// Stream events to the store.
	Store(ctx context.Context, opts ...grpc.CallOption) (EventStore_StoreClient, error)
	// Get a stream of Events
	Retrieve(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (EventStore_RetrieveClient, error)
}

type eventStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreClient(cc grpc.ClientConnInterface) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) Store(ctx context.Context, opts ...grpc.CallOption) (EventStore_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventStore_serviceDesc.Streams[0], "/eventstore.EventStore/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreStoreClient{stream}
	return x, nil
}

type EventStore_StoreClient interface {
	Send(*Event) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type eventStoreStoreClient struct {
	grpc.ClientStream
}

func (x *eventStoreStoreClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventStoreStoreClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStoreClient) Retrieve(ctx context.Context, in *EventFilter, opts ...grpc.CallOption) (EventStore_RetrieveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventStore_serviceDesc.Streams[1], "/eventstore.EventStore/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreRetrieveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStore_RetrieveClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStoreRetrieveClient struct {
	grpc.ClientStream
}

func (x *eventStoreRetrieveClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStoreServer is the server API for EventStore service.
// All implementations must embed UnimplementedEventStoreServer
// for forward compatibility
type EventStoreServer interface {
	// Stream events to the store.
	Store(EventStore_StoreServer) error
	// Get a stream of Events
	Retrieve(*EventFilter, EventStore_RetrieveServer) error
	mustEmbedUnimplementedEventStoreServer()
}

// UnimplementedEventStoreServer must be embedded to have forward compatible implementations.
type UnimplementedEventStoreServer struct {
}

func (UnimplementedEventStoreServer) Store(EventStore_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedEventStoreServer) Retrieve(*EventFilter, EventStore_RetrieveServer) error {
	return status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedEventStoreServer) mustEmbedUnimplementedEventStoreServer() {}

// UnsafeEventStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServer will
// result in compilation errors.
type UnsafeEventStoreServer interface {
	mustEmbedUnimplementedEventStoreServer()
}

func RegisterEventStoreServer(s grpc.ServiceRegistrar, srv EventStoreServer) {
	s.RegisterService(&_EventStore_serviceDesc, srv)
}

func _EventStore_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventStoreServer).Store(&eventStoreStoreServer{stream})
}

type EventStore_StoreServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type eventStoreStoreServer struct {
	grpc.ServerStream
}

func (x *eventStoreStoreServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventStoreStoreServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EventStore_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).Retrieve(m, &eventStoreRetrieveServer{stream})
}

type EventStore_RetrieveServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStoreRetrieveServer struct {
	grpc.ServerStream
}

func (x *eventStoreRetrieveServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _EventStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventstore.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _EventStore_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _EventStore_Retrieve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/eventstore/service.proto",
}
