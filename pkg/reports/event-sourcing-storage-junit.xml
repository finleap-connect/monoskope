<?xml version="1.0" encoding="UTF-8"?>
  <testsuite name="event_sourcing/storage" tests="15" failures="0" errors="0" time="3.972">
      <testcase name="storage/inmemory can create new event store" classname="event_sourcing/storage" time="1.0635e-05"></testcase>
      <testcase name="storage/inmemory can append new events to the store" classname="event_sourcing/storage" time="8.0027e-05"></testcase>
      <testcase name="storage/inmemory fails to append new events to the store when they are not of the same aggregate type" classname="event_sourcing/storage" time="1.7781e-05"></testcase>
      <testcase name="storage/inmemory fails to append new events to the store when they are not in the right aggregate version order" classname="event_sourcing/storage" time="1.2657e-05"></testcase>
      <testcase name="storage/inmemory fails to append new events to the store when the aggregate version does already exist" classname="event_sourcing/storage" time="1.6567e-05"></testcase>
      <testcase name="storage/inmemory can load events from the store" classname="event_sourcing/storage" time="3.6214e-05"></testcase>
      <testcase name="storage/inmemory can filter events to load from the store by aggregate type" classname="event_sourcing/storage" time="1.7579e-05"></testcase>
      <testcase name="storage/inmemory can filter events to load from the store by aggregate version" classname="event_sourcing/storage" time="2.8279e-05"></testcase>
      <testcase name="storage/postgres can append new events to the store" classname="event_sourcing/storage" time="0.342775803"></testcase>
      <testcase name="storage/postgres fails to append new events to the store when they are not of the same aggregate type" classname="event_sourcing/storage" time="0.30220605"></testcase>
      <testcase name="storage/postgres fails to append new events to the store when they are not in the right aggregate version order" classname="event_sourcing/storage" time="0.304818751"></testcase>
      <testcase name="storage/postgres fails to append new events to the store when the aggregate version does already exist" classname="event_sourcing/storage" time="0.316787597"></testcase>
      <testcase name="storage/postgres can load events from the store" classname="event_sourcing/storage" time="0.321053077"></testcase>
      <testcase name="storage/postgres can filter events to load from the store by aggregate type" classname="event_sourcing/storage" time="0.319756342"></testcase>
      <testcase name="storage/postgres can filter events to load from the store by aggregate version" classname="event_sourcing/storage" time="0.328093313"></testcase>
  </testsuite>