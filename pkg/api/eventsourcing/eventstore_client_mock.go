// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.figo.systems/platform/monoskope/monoskope/pkg/api/eventsourcing (interfaces: EventStoreClient,EventStore_StoreClient)

// Package eventsourcing is a generated GoMock package.
package eventsourcing

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockEventStoreClient is a mock of EventStoreClient interface.
type MockEventStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreClientMockRecorder
}

// MockEventStoreClientMockRecorder is the mock recorder for MockEventStoreClient.
type MockEventStoreClientMockRecorder struct {
	mock *MockEventStoreClient
}

// NewMockEventStoreClient creates a new mock instance.
func NewMockEventStoreClient(ctrl *gomock.Controller) *MockEventStoreClient {
	mock := &MockEventStoreClient{ctrl: ctrl}
	mock.recorder = &MockEventStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStoreClient) EXPECT() *MockEventStoreClientMockRecorder {
	return m.recorder
}

// Retrieve mocks base method.
func (m *MockEventStoreClient) Retrieve(arg0 context.Context, arg1 *EventFilter, arg2 ...grpc.CallOption) (EventStore_RetrieveClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retrieve", varargs...)
	ret0, _ := ret[0].(EventStore_RetrieveClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockEventStoreClientMockRecorder) Retrieve(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockEventStoreClient)(nil).Retrieve), varargs...)
}

// Store mocks base method.
func (m *MockEventStoreClient) Store(arg0 context.Context, arg1 ...grpc.CallOption) (EventStore_StoreClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Store", varargs...)
	ret0, _ := ret[0].(EventStore_StoreClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockEventStoreClientMockRecorder) Store(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockEventStoreClient)(nil).Store), varargs...)
}

// MockEventStore_StoreClient is a mock of EventStore_StoreClient interface.
type MockEventStore_StoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventStore_StoreClientMockRecorder
}

// MockEventStore_StoreClientMockRecorder is the mock recorder for MockEventStore_StoreClient.
type MockEventStore_StoreClientMockRecorder struct {
	mock *MockEventStore_StoreClient
}

// NewMockEventStore_StoreClient creates a new mock instance.
func NewMockEventStore_StoreClient(ctrl *gomock.Controller) *MockEventStore_StoreClient {
	mock := &MockEventStore_StoreClient{ctrl: ctrl}
	mock.recorder = &MockEventStore_StoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore_StoreClient) EXPECT() *MockEventStore_StoreClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockEventStore_StoreClient) CloseAndRecv() (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockEventStore_StoreClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockEventStore_StoreClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockEventStore_StoreClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockEventStore_StoreClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockEventStore_StoreClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockEventStore_StoreClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEventStore_StoreClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEventStore_StoreClient)(nil).Context))
}

// Header mocks base method.
func (m *MockEventStore_StoreClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockEventStore_StoreClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockEventStore_StoreClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m *MockEventStore_StoreClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEventStore_StoreClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEventStore_StoreClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockEventStore_StoreClient) Send(arg0 *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEventStore_StoreClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEventStore_StoreClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockEventStore_StoreClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEventStore_StoreClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEventStore_StoreClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockEventStore_StoreClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockEventStore_StoreClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockEventStore_StoreClient)(nil).Trailer))
}
