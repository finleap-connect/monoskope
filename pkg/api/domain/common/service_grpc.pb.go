// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceInformationServiceClient is the client API for ServiceInformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInformationServiceClient interface {
	// Get information about the service. This can include information for other
	// services additionally.
	GetServiceInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ServiceInformationService_GetServiceInformationClient, error)
}

type serviceInformationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInformationServiceClient(cc grpc.ClientConnInterface) ServiceInformationServiceClient {
	return &serviceInformationServiceClient{cc}
}

func (c *serviceInformationServiceClient) GetServiceInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ServiceInformationService_GetServiceInformationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceInformationService_ServiceDesc.Streams[0], "/common.ServiceInformationService/GetServiceInformation", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceInformationServiceGetServiceInformationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceInformationService_GetServiceInformationClient interface {
	Recv() (*ServiceInformation, error)
	grpc.ClientStream
}

type serviceInformationServiceGetServiceInformationClient struct {
	grpc.ClientStream
}

func (x *serviceInformationServiceGetServiceInformationClient) Recv() (*ServiceInformation, error) {
	m := new(ServiceInformation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceInformationServiceServer is the server API for ServiceInformationService service.
// All implementations must embed UnimplementedServiceInformationServiceServer
// for forward compatibility
type ServiceInformationServiceServer interface {
	// Get information about the service. This can include information for other
	// services additionally.
	GetServiceInformation(*emptypb.Empty, ServiceInformationService_GetServiceInformationServer) error
	mustEmbedUnimplementedServiceInformationServiceServer()
}

// UnimplementedServiceInformationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceInformationServiceServer struct {
}

func (UnimplementedServiceInformationServiceServer) GetServiceInformation(*emptypb.Empty, ServiceInformationService_GetServiceInformationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServiceInformation not implemented")
}
func (UnimplementedServiceInformationServiceServer) mustEmbedUnimplementedServiceInformationServiceServer() {
}

// UnsafeServiceInformationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInformationServiceServer will
// result in compilation errors.
type UnsafeServiceInformationServiceServer interface {
	mustEmbedUnimplementedServiceInformationServiceServer()
}

func RegisterServiceInformationServiceServer(s grpc.ServiceRegistrar, srv ServiceInformationServiceServer) {
	s.RegisterService(&ServiceInformationService_ServiceDesc, srv)
}

func _ServiceInformationService_GetServiceInformation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceInformationServiceServer).GetServiceInformation(m, &serviceInformationServiceGetServiceInformationServer{stream})
}

type ServiceInformationService_GetServiceInformationServer interface {
	Send(*ServiceInformation) error
	grpc.ServerStream
}

type serviceInformationServiceGetServiceInformationServer struct {
	grpc.ServerStream
}

func (x *serviceInformationServiceGetServiceInformationServer) Send(m *ServiceInformation) error {
	return x.ServerStream.SendMsg(m)
}

// ServiceInformationService_ServiceDesc is the grpc.ServiceDesc for ServiceInformationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInformationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.ServiceInformationService",
	HandlerType: (*ServiceInformationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServiceInformation",
			Handler:       _ServiceInformationService_GetServiceInformation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/domain/common/service.proto",
}
