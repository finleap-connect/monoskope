// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/domain/eventdata/tenant.proto

package eventdata

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TenantCreated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantCreated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantCreatedMultiError, or
// nil if none found.
func (m *TenantCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 150 {
		err := TenantCreatedValidationError{
			field:  "Name",
			reason: "value length must be at most 150 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPrefix()) > 12 {
		err := TenantCreatedValidationError{
			field:  "Prefix",
			reason: "value length must be at most 12 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_TenantCreated_Prefix_Pattern.MatchString(m.GetPrefix()) {
		err := TenantCreatedValidationError{
			field:  "Prefix",
			reason: "value does not match regex pattern \"^[a-zA-Z][A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TenantCreatedMultiError(errors)
	}
	return nil
}

// TenantCreatedMultiError is an error wrapping multiple validation errors
// returned by TenantCreated.ValidateAll() if the designated constraints
// aren't met.
type TenantCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantCreatedMultiError) AllErrors() []error { return m }

// TenantCreatedValidationError is the validation error returned by
// TenantCreated.Validate if the designated constraints aren't met.
type TenantCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantCreatedValidationError) ErrorName() string { return "TenantCreatedValidationError" }

// Error satisfies the builtin error interface
func (e TenantCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantCreatedValidationError{}

var _TenantCreated_Prefix_Pattern = regexp.MustCompile("^[a-zA-Z][A-Za-z0-9_-]+$")

// Validate checks the field values on TenantUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantUpdated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantUpdatedMultiError, or
// nil if none found.
func (m *TenantUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if wrapper := m.GetName(); wrapper != nil {

		if len(wrapper.GetValue()) > 60 {
			err := TenantUpdatedValidationError{
				field:  "Name",
				reason: "value length must be at most 60 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_TenantUpdated_Name_Pattern.MatchString(wrapper.GetValue()) {
			err := TenantUpdatedValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[a-zA-Z][A-Za-z0-9_-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return TenantUpdatedMultiError(errors)
	}
	return nil
}

// TenantUpdatedMultiError is an error wrapping multiple validation errors
// returned by TenantUpdated.ValidateAll() if the designated constraints
// aren't met.
type TenantUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantUpdatedMultiError) AllErrors() []error { return m }

// TenantUpdatedValidationError is the validation error returned by
// TenantUpdated.Validate if the designated constraints aren't met.
type TenantUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantUpdatedValidationError) ErrorName() string { return "TenantUpdatedValidationError" }

// Error satisfies the builtin error interface
func (e TenantUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantUpdatedValidationError{}

var _TenantUpdated_Name_Pattern = regexp.MustCompile("^[a-zA-Z][A-Za-z0-9_-]+$")
