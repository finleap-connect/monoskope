// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/domain/commanddata/tenant.proto

package commanddata

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTenantCommandData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantCommandData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantCommandData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantCommandDataMultiError, or nil if none found.
func (m *CreateTenantCommandData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantCommandData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 150 {
		err := CreateTenantCommandDataValidationError{
			field:  "Name",
			reason: "value length must be at most 150 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPrefix()) > 12 {
		err := CreateTenantCommandDataValidationError{
			field:  "Prefix",
			reason: "value length must be at most 12 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateTenantCommandData_Prefix_Pattern.MatchString(m.GetPrefix()) {
		err := CreateTenantCommandDataValidationError{
			field:  "Prefix",
			reason: "value does not match regex pattern \"^[a-zA-Z_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTenantCommandDataMultiError(errors)
	}
	return nil
}

// CreateTenantCommandDataMultiError is an error wrapping multiple validation
// errors returned by CreateTenantCommandData.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantCommandDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantCommandDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantCommandDataMultiError) AllErrors() []error { return m }

// CreateTenantCommandDataValidationError is the validation error returned by
// CreateTenantCommandData.Validate if the designated constraints aren't met.
type CreateTenantCommandDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantCommandDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantCommandDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantCommandDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantCommandDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantCommandDataValidationError) ErrorName() string {
	return "CreateTenantCommandDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantCommandDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantCommandData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantCommandDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantCommandDataValidationError{}

var _CreateTenantCommandData_Prefix_Pattern = regexp.MustCompile("^[a-zA-Z_]+$")

// Validate checks the field values on UpdateTenantCommandData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantCommandData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantCommandData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantCommandDataMultiError, or nil if none found.
func (m *UpdateTenantCommandData) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantCommandData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if wrapper := m.GetName(); wrapper != nil {

		if len(wrapper.GetValue()) > 60 {
			err := UpdateTenantCommandDataValidationError{
				field:  "Name",
				reason: "value length must be at most 60 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_UpdateTenantCommandData_Name_Pattern.MatchString(wrapper.GetValue()) {
			err := UpdateTenantCommandDataValidationError{
				field:  "Name",
				reason: "value does not match regex pattern \"^[a-zA-Z_]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateTenantCommandDataMultiError(errors)
	}
	return nil
}

// UpdateTenantCommandDataMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantCommandData.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantCommandDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantCommandDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantCommandDataMultiError) AllErrors() []error { return m }

// UpdateTenantCommandDataValidationError is the validation error returned by
// UpdateTenantCommandData.Validate if the designated constraints aren't met.
type UpdateTenantCommandDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantCommandDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantCommandDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantCommandDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantCommandDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantCommandDataValidationError) ErrorName() string {
	return "UpdateTenantCommandDataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantCommandDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantCommandData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantCommandDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantCommandDataValidationError{}

var _UpdateTenantCommandData_Name_Pattern = regexp.MustCompile("^[a-zA-Z_]+$")
