// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetAuthInformation(ctx context.Context, in *AuthState, opts ...grpc.CallOption) (*AuthInformation, error)
	ExchangeAuthCode(ctx context.Context, in *AuthCode, opts ...grpc.CallOption) (*AuthResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetAuthInformation(ctx context.Context, in *AuthState, opts ...grpc.CallOption) (*AuthInformation, error) {
	out := new(AuthInformation)
	err := c.cc.Invoke(ctx, "/gateway.Gateway/GetAuthInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ExchangeAuthCode(ctx context.Context, in *AuthCode, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/gateway.Gateway/ExchangeAuthCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetAuthInformation(context.Context, *AuthState) (*AuthInformation, error)
	ExchangeAuthCode(context.Context, *AuthCode) (*AuthResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetAuthInformation(context.Context, *AuthState) (*AuthInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthInformation not implemented")
}
func (UnimplementedGatewayServer) ExchangeAuthCode(context.Context, *AuthCode) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeAuthCode not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetAuthInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAuthInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.Gateway/GetAuthInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAuthInformation(ctx, req.(*AuthState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ExchangeAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ExchangeAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.Gateway/ExchangeAuthCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ExchangeAuthCode(ctx, req.(*AuthCode))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthInformation",
			Handler:    _Gateway_GetAuthInformation_Handler,
		},
		{
			MethodName: "ExchangeAuthCode",
			Handler:    _Gateway_ExchangeAuthCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/service.proto",
}

// ClusterAuthClient is the client API for ClusterAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterAuthClient interface {
	GetAuthToken(ctx context.Context, in *ClusterAuthTokenRequest, opts ...grpc.CallOption) (*ClusterAuthTokenResponse, error)
}

type clusterAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterAuthClient(cc grpc.ClientConnInterface) ClusterAuthClient {
	return &clusterAuthClient{cc}
}

func (c *clusterAuthClient) GetAuthToken(ctx context.Context, in *ClusterAuthTokenRequest, opts ...grpc.CallOption) (*ClusterAuthTokenResponse, error) {
	out := new(ClusterAuthTokenResponse)
	err := c.cc.Invoke(ctx, "/gateway.ClusterAuth/GetAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterAuthServer is the server API for ClusterAuth service.
// All implementations must embed UnimplementedClusterAuthServer
// for forward compatibility
type ClusterAuthServer interface {
	GetAuthToken(context.Context, *ClusterAuthTokenRequest) (*ClusterAuthTokenResponse, error)
	mustEmbedUnimplementedClusterAuthServer()
}

// UnimplementedClusterAuthServer must be embedded to have forward compatible implementations.
type UnimplementedClusterAuthServer struct {
}

func (UnimplementedClusterAuthServer) GetAuthToken(context.Context, *ClusterAuthTokenRequest) (*ClusterAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthToken not implemented")
}
func (UnimplementedClusterAuthServer) mustEmbedUnimplementedClusterAuthServer() {}

// UnsafeClusterAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterAuthServer will
// result in compilation errors.
type UnsafeClusterAuthServer interface {
	mustEmbedUnimplementedClusterAuthServer()
}

func RegisterClusterAuthServer(s grpc.ServiceRegistrar, srv ClusterAuthServer) {
	s.RegisterService(&ClusterAuth_ServiceDesc, srv)
}

func _ClusterAuth_GetAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAuthServer).GetAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.ClusterAuth/GetAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAuthServer).GetAuthToken(ctx, req.(*ClusterAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterAuth_ServiceDesc is the grpc.ServiceDesc for ClusterAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.ClusterAuth",
	HandlerType: (*ClusterAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthToken",
			Handler:    _ClusterAuth_GetAuthToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/service.proto",
}
