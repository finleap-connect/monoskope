// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gateway/messages.proto

package gateway

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UpstreamAuthenticationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpstreamAuthenticationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpstreamAuthenticationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpstreamAuthenticationRequestMultiError, or nil if none found.
func (m *UpstreamAuthenticationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpstreamAuthenticationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetCallbackUrl()); err != nil {
		err = UpstreamAuthenticationRequestValidationError{
			field:  "CallbackUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := UpstreamAuthenticationRequestValidationError{
			field:  "CallbackUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpstreamAuthenticationRequestMultiError(errors)
	}

	return nil
}

// UpstreamAuthenticationRequestMultiError is an error wrapping multiple
// validation errors returned by UpstreamAuthenticationRequest.ValidateAll()
// if the designated constraints aren't met.
type UpstreamAuthenticationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpstreamAuthenticationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpstreamAuthenticationRequestMultiError) AllErrors() []error { return m }

// UpstreamAuthenticationRequestValidationError is the validation error
// returned by UpstreamAuthenticationRequest.Validate if the designated
// constraints aren't met.
type UpstreamAuthenticationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpstreamAuthenticationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpstreamAuthenticationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpstreamAuthenticationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpstreamAuthenticationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpstreamAuthenticationRequestValidationError) ErrorName() string {
	return "UpstreamAuthenticationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpstreamAuthenticationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstreamAuthenticationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpstreamAuthenticationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpstreamAuthenticationRequestValidationError{}

// Validate checks the field values on UpstreamAuthenticationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpstreamAuthenticationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpstreamAuthenticationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpstreamAuthenticationResponseMultiError, or nil if none found.
func (m *UpstreamAuthenticationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpstreamAuthenticationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpstreamIdpRedirect

	// no validation rules for State

	if len(errors) > 0 {
		return UpstreamAuthenticationResponseMultiError(errors)
	}

	return nil
}

// UpstreamAuthenticationResponseMultiError is an error wrapping multiple
// validation errors returned by UpstreamAuthenticationResponse.ValidateAll()
// if the designated constraints aren't met.
type UpstreamAuthenticationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpstreamAuthenticationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpstreamAuthenticationResponseMultiError) AllErrors() []error { return m }

// UpstreamAuthenticationResponseValidationError is the validation error
// returned by UpstreamAuthenticationResponse.Validate if the designated
// constraints aren't met.
type UpstreamAuthenticationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpstreamAuthenticationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpstreamAuthenticationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpstreamAuthenticationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpstreamAuthenticationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpstreamAuthenticationResponseValidationError) ErrorName() string {
	return "UpstreamAuthenticationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpstreamAuthenticationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstreamAuthenticationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpstreamAuthenticationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpstreamAuthenticationResponseValidationError{}

// Validate checks the field values on AuthenticationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationRequestMultiError, or nil if none found.
func (m *AuthenticationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := AuthenticationRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) < 1 {
		err := AuthenticationRequestValidationError{
			field:  "State",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthenticationRequestMultiError(errors)
	}

	return nil
}

// AuthenticationRequestMultiError is an error wrapping multiple validation
// errors returned by AuthenticationRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationRequestMultiError) AllErrors() []error { return m }

// AuthenticationRequestValidationError is the validation error returned by
// AuthenticationRequest.Validate if the designated constraints aren't met.
type AuthenticationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationRequestValidationError) ErrorName() string {
	return "AuthenticationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationRequestValidationError{}

// Validate checks the field values on AuthenticationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticationResponseMultiError, or nil if none found.
func (m *AuthenticationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticationResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticationResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticationResponseValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	if len(errors) > 0 {
		return AuthenticationResponseMultiError(errors)
	}

	return nil
}

// AuthenticationResponseMultiError is an error wrapping multiple validation
// errors returned by AuthenticationResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthenticationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticationResponseMultiError) AllErrors() []error { return m }

// AuthenticationResponseValidationError is the validation error returned by
// AuthenticationResponse.Validate if the designated constraints aren't met.
type AuthenticationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationResponseValidationError) ErrorName() string {
	return "AuthenticationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationResponseValidationError{}

// Validate checks the field values on ClusterAuthTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterAuthTokenRequestMultiError, or nil if none found.
func (m *ClusterAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetClusterId()); err != nil {
		err = ClusterAuthTokenRequestValidationError{
			field:  "ClusterId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) > 60 {
		err := ClusterAuthTokenRequestValidationError{
			field:  "Role",
			reason: "value length must be at most 60 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ClusterAuthTokenRequest_Role_Pattern.MatchString(m.GetRole()) {
		err := ClusterAuthTokenRequestValidationError{
			field:  "Role",
			reason: "value does not match regex pattern \"^[a-z0-9-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterAuthTokenRequestMultiError(errors)
	}

	return nil
}

func (m *ClusterAuthTokenRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ClusterAuthTokenRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterAuthTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterAuthTokenRequestMultiError) AllErrors() []error { return m }

// ClusterAuthTokenRequestValidationError is the validation error returned by
// ClusterAuthTokenRequest.Validate if the designated constraints aren't met.
type ClusterAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterAuthTokenRequestValidationError) ErrorName() string {
	return "ClusterAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterAuthTokenRequestValidationError{}

var _ClusterAuthTokenRequest_Role_Pattern = regexp.MustCompile("^[a-z0-9-]+$")

// Validate checks the field values on ClusterAuthTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterAuthTokenResponseMultiError, or nil if none found.
func (m *ClusterAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterAuthTokenResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterAuthTokenResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterAuthTokenResponseValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterAuthTokenResponseMultiError(errors)
	}

	return nil
}

// ClusterAuthTokenResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterAuthTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterAuthTokenResponseMultiError) AllErrors() []error { return m }

// ClusterAuthTokenResponseValidationError is the validation error returned by
// ClusterAuthTokenResponse.Validate if the designated constraints aren't met.
type ClusterAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterAuthTokenResponseValidationError) ErrorName() string {
	return "ClusterAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterAuthTokenResponseValidationError{}

// Validate checks the field values on APITokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *APITokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITokenRequestMultiError, or nil if none found.
func (m *APITokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValidity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITokenRequestValidationError{
					field:  "Validity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITokenRequestValidationError{
					field:  "Validity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITokenRequestValidationError{
				field:  "Validity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.User.(type) {

	case *APITokenRequest_UserId:

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = APITokenRequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *APITokenRequest_Username:

		if utf8.RuneCountInString(m.GetUsername()) < 1 {
			err := APITokenRequestValidationError{
				field:  "Username",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return APITokenRequestMultiError(errors)
	}

	return nil
}

func (m *APITokenRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// APITokenRequestMultiError is an error wrapping multiple validation errors
// returned by APITokenRequest.ValidateAll() if the designated constraints
// aren't met.
type APITokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenRequestMultiError) AllErrors() []error { return m }

// APITokenRequestValidationError is the validation error returned by
// APITokenRequest.Validate if the designated constraints aren't met.
type APITokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenRequestValidationError) ErrorName() string { return "APITokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e APITokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenRequestValidationError{}

// Validate checks the field values on APITokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *APITokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITokenResponseMultiError, or nil if none found.
func (m *APITokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITokenResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITokenResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITokenResponseValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return APITokenResponseMultiError(errors)
	}

	return nil
}

// APITokenResponseMultiError is an error wrapping multiple validation errors
// returned by APITokenResponse.ValidateAll() if the designated constraints
// aren't met.
type APITokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenResponseMultiError) AllErrors() []error { return m }

// APITokenResponseValidationError is the validation error returned by
// APITokenResponse.Validate if the designated constraints aren't met.
type APITokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenResponseValidationError) ErrorName() string { return "APITokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e APITokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenResponseValidationError{}

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckRequestMultiError, or
// nil if none found.
func (m *CheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFullMethodName()) < 1 {
		err := CheckRequestValidationError{
			field:  "FullMethodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := CheckRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Request

	if len(errors) > 0 {
		return CheckRequestMultiError(errors)
	}

	return nil
}

// CheckRequestMultiError is an error wrapping multiple validation errors
// returned by CheckRequest.ValidateAll() if the designated constraints aren't met.
type CheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRequestMultiError) AllErrors() []error { return m }

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

// Validate checks the field values on CheckResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResponseMultiError, or
// nil if none found.
func (m *CheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResponseValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResponseValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResponseValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckResponseMultiError(errors)
	}

	return nil
}

// CheckResponseMultiError is an error wrapping multiple validation errors
// returned by CheckResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResponseMultiError) AllErrors() []error { return m }

// CheckResponseValidationError is the validation error returned by
// CheckResponse.Validate if the designated constraints aren't met.
type CheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponseValidationError) ErrorName() string { return "CheckResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponseValidationError{}

// Validate checks the field values on CheckResponse_CheckResponseTag with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResponse_CheckResponseTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResponse_CheckResponseTag with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckResponse_CheckResponseTagMultiError, or nil if none found.
func (m *CheckResponse_CheckResponseTag) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResponse_CheckResponseTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return CheckResponse_CheckResponseTagMultiError(errors)
	}

	return nil
}

// CheckResponse_CheckResponseTagMultiError is an error wrapping multiple
// validation errors returned by CheckResponse_CheckResponseTag.ValidateAll()
// if the designated constraints aren't met.
type CheckResponse_CheckResponseTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResponse_CheckResponseTagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResponse_CheckResponseTagMultiError) AllErrors() []error { return m }

// CheckResponse_CheckResponseTagValidationError is the validation error
// returned by CheckResponse_CheckResponseTag.Validate if the designated
// constraints aren't met.
type CheckResponse_CheckResponseTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponse_CheckResponseTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponse_CheckResponseTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponse_CheckResponseTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponse_CheckResponseTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponse_CheckResponseTagValidationError) ErrorName() string {
	return "CheckResponse_CheckResponseTagValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResponse_CheckResponseTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse_CheckResponseTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponse_CheckResponseTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponse_CheckResponseTagValidationError{}
