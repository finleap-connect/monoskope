# Default values for monoskope.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

name: monoskope
nameOverride: ""
fullnameOverride: ""

pullSecret: ""

dex:
  enabled: true
  imagePullPolicy: "Always"
  replicas: 1
  # resources:
  # limits:
  # cpu: 100m
  # memory: 50Mi
  # requests:
  # cpu: 100m
  # memory: 50Mi
  # grpc support
  grpc:
    enabled: true
    enableTLS: true
  # https termination by dex itself
  https: false
  # expose prometheus metrics ?
  telemetry: true
  certs:
    # Section below is relevant only when https termination is enabled
    web:
      create: false
    # Section below is relevant only when grpc support is enabled
    grpc:
      create: false
  env: []
  rbac:
    # Specifies whether RBAC resources should be created
    create: false
  crd:
    # Specifies whether dex's CRDs are already present (if not cluster role and cluster role binding will be created
    # to enable dex to create them). Depends on rbac.create
    present: true
  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: false
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:
  affinity:
    {}
    # podAntiAffinity:
    #   preferredDuringSchedulingIgnoredDuringExecution:
    #   - weight: 5
    #     podAffinityTerm:
    #       topologyKey: "kubernetes.io/hostname"
    #       labelSelector:
    #         matchLabels:
    #           app: {{ template "dex.name" . }}
    #           release: "{{ .Release.Name }}"
  podDisruptionBudget:
    {}
    # maxUnavailable: 1
  config:
    issuer: http://127.0.0.1:5080
    storage:
      type: kubernetes
      config:
        inCluster: true
    logger:
      level: debug
    web:
      # port is taken from ports section above
      address: 0.0.0.0
      allowedOrigins: []
    # Section below is relevant only when grpc support is enabled
    grpc:
      # port is taken from ports section above
      address: 127.0.0.1
    connectors: []
    # - type: google
    #   id: google
    #   name: Google
    #   config:
    #     # Connector config values starting with a "$" will read from the environment.
    #     clientID: $GOOGLE_CLIENT_ID
    #     clientSecret: $GOOGLE_CLIENT_SECRET

    #     # Dex's issuer URL + "/callback"
    #     redirectURI: http://127.0.0.1:5080/callback

    #     # Google supports whitelisting allowed domains when using G Suite
    #     # (Google Apps). The following field can be set to a list of domains
    #     # that can log in:
    #     #
    #     # hostedDomains:
    #     #  - example.com

    #     # The Google connector supports whitelisting allowed groups when using G Suite
    #     # (Google Apps). The following field can be set to a list of groups
    #     # that can log in:
    #     #
    #     # groups:
    #     #  - admins@example.com

    #     # Google does not support the OpenID Connect groups claim and only supports
    #     # fetching a user's group membership with a service account.
    #     # This service account requires an authentication JSON file and the email
    #     # of a G Suite admin to impersonate:
    #     #
    #     #serviceAccountFilePath: googleAuth.json
    #     #adminEmail: super-user@example.com
    oauth2:
      alwaysShowLoginScreen: false
      skipApprovalScreen: true
    #  expiry:
    #    signingKeys: "6h"
    #    idTokens: "24h"
    staticClients:
      - id: gateway
        redirectURIs:
          - "http://127.0.0.1:8080/oauth2/callback"
        name: "Monoskope Gateway"
        secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    enablePasswordDB: true
  #  staticPasswords:
  #   - email: "admin@example.com"
  #     # bcrypt hash of the string "password"
  #     hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
  #     username: "admin"
  #     userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
  # frontend:
  #   logoURL: https://example.com/yourlogo.png
