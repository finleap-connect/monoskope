// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finleap-connect/monoskope/pkg/domain/repositories (interfaces: UserRepository,ClusterRepository)

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	projections "github.com/finleap-connect/monoskope/pkg/domain/projections"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockUserRepository) All(arg0 context.Context) ([]*projections.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*projections.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockUserRepositoryMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockUserRepository)(nil).All), arg0)
}

// AllWith mocks base method.
func (m *MockUserRepository) AllWith(arg0 context.Context, arg1 bool) ([]*projections.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWith", arg0, arg1)
	ret0, _ := ret[0].([]*projections.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWith indicates an expected call of AllWith.
func (mr *MockUserRepositoryMockRecorder) AllWith(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWith", reflect.TypeOf((*MockUserRepository)(nil).AllWith), arg0, arg1)
}

// ByEmail mocks base method.
func (m *MockUserRepository) ByEmail(arg0 context.Context, arg1 string) (*projections.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByEmail", arg0, arg1)
	ret0, _ := ret[0].(*projections.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByEmail indicates an expected call of ByEmail.
func (mr *MockUserRepositoryMockRecorder) ByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByEmail", reflect.TypeOf((*MockUserRepository)(nil).ByEmail), arg0, arg1)
}

// ById mocks base method.
func (m *MockUserRepository) ById(arg0 context.Context, arg1 uuid.UUID) (*projections.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0, arg1)
	ret0, _ := ret[0].(*projections.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockUserRepositoryMockRecorder) ById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockUserRepository)(nil).ById), arg0, arg1)
}

// ByUserId mocks base method.
func (m *MockUserRepository) ByUserId(arg0 context.Context, arg1 uuid.UUID) (*projections.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByUserId", arg0, arg1)
	ret0, _ := ret[0].(*projections.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByUserId indicates an expected call of ByUserId.
func (mr *MockUserRepositoryMockRecorder) ByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByUserId", reflect.TypeOf((*MockUserRepository)(nil).ByUserId), arg0, arg1)
}

// GetCount mocks base method.
func (m *MockUserRepository) GetCount(arg0 context.Context, arg1 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockUserRepositoryMockRecorder) GetCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockUserRepository)(nil).GetCount), arg0, arg1)
}

// Remove mocks base method.
func (m *MockUserRepository) Remove(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockUserRepositoryMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUserRepository)(nil).Remove), arg0, arg1)
}

// Upsert mocks base method.
func (m *MockUserRepository) Upsert(arg0 context.Context, arg1 *projections.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUserRepositoryMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserRepository)(nil).Upsert), arg0, arg1)
}

// MockClusterRepository is a mock of ClusterRepository interface.
type MockClusterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRepositoryMockRecorder
}

// MockClusterRepositoryMockRecorder is the mock recorder for MockClusterRepository.
type MockClusterRepositoryMockRecorder struct {
	mock *MockClusterRepository
}

// NewMockClusterRepository creates a new mock instance.
func NewMockClusterRepository(ctrl *gomock.Controller) *MockClusterRepository {
	mock := &MockClusterRepository{ctrl: ctrl}
	mock.recorder = &MockClusterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRepository) EXPECT() *MockClusterRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockClusterRepository) All(arg0 context.Context) ([]*projections.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*projections.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockClusterRepositoryMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockClusterRepository)(nil).All), arg0)
}

// AllWith mocks base method.
func (m *MockClusterRepository) AllWith(arg0 context.Context, arg1 bool) ([]*projections.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWith", arg0, arg1)
	ret0, _ := ret[0].([]*projections.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWith indicates an expected call of AllWith.
func (mr *MockClusterRepositoryMockRecorder) AllWith(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWith", reflect.TypeOf((*MockClusterRepository)(nil).AllWith), arg0, arg1)
}

// ByClusterName mocks base method.
func (m *MockClusterRepository) ByClusterName(arg0 context.Context, arg1 string) (*projections.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByClusterName", arg0, arg1)
	ret0, _ := ret[0].(*projections.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByClusterName indicates an expected call of ByClusterName.
func (mr *MockClusterRepositoryMockRecorder) ByClusterName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByClusterName", reflect.TypeOf((*MockClusterRepository)(nil).ByClusterName), arg0, arg1)
}

// ById mocks base method.
func (m *MockClusterRepository) ById(arg0 context.Context, arg1 uuid.UUID) (*projections.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ById", arg0, arg1)
	ret0, _ := ret[0].(*projections.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ById indicates an expected call of ById.
func (mr *MockClusterRepositoryMockRecorder) ById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ById", reflect.TypeOf((*MockClusterRepository)(nil).ById), arg0, arg1)
}

// Remove mocks base method.
func (m *MockClusterRepository) Remove(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockClusterRepositoryMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockClusterRepository)(nil).Remove), arg0, arg1)
}

// Upsert mocks base method.
func (m *MockClusterRepository) Upsert(arg0 context.Context, arg1 *projections.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockClusterRepositoryMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockClusterRepository)(nil).Upsert), arg0, arg1)
}
