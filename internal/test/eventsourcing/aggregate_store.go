// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finleap-connect/monoskope/pkg/eventsourcing (interfaces: AggregateStore)

// Package mock_eventsourcing is a generated GoMock package.
package mock_eventsourcing

import (
	context "context"
	reflect "reflect"

	eventsourcing "github.com/finleap-connect/monoskope/pkg/eventsourcing"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAggregateStore is a mock of AggregateStore interface.
type MockAggregateStore struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateStoreMockRecorder
}

// MockAggregateStoreMockRecorder is the mock recorder for MockAggregateStore.
type MockAggregateStoreMockRecorder struct {
	mock *MockAggregateStore
}

// NewMockAggregateStore creates a new mock instance.
func NewMockAggregateStore(ctrl *gomock.Controller) *MockAggregateStore {
	mock := &MockAggregateStore{ctrl: ctrl}
	mock.recorder = &MockAggregateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateStore) EXPECT() *MockAggregateStoreMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockAggregateStore) All(arg0 context.Context, arg1 eventsourcing.AggregateType) ([]eventsourcing.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].([]eventsourcing.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockAggregateStoreMockRecorder) All(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAggregateStore)(nil).All), arg0, arg1)
}

// Get mocks base method.
func (m *MockAggregateStore) Get(arg0 context.Context, arg1 eventsourcing.AggregateType, arg2 uuid.UUID) (eventsourcing.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(eventsourcing.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAggregateStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAggregateStore)(nil).Get), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockAggregateStore) Update(arg0 context.Context, arg1 eventsourcing.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAggregateStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAggregateStore)(nil).Update), arg0, arg1)
}
